// Code from Godot tests.

#include "map.h"
#include "reference.h"
#include "script_language.h"
#include "ustring.h"
#include "variant.h"

#include "../gdscript/gd_functions.h"

/*************************************************************************/
/*  test_gdscript.cpp                                                    */
/*************************************************************************/
/*                       This file is part of:                           */
/*                           GODOT ENGINE                                */
/*                    http://www.godotengine.org                         */
/*************************************************************************/
/* Copyright (c) 2007-2016 Juan Linietsky, Ariel Manzur.                 */
/*                                                                       */
/* Permission is hereby granted, free of charge, to any person obtaining */
/* a copy of this software and associated documentation files (the       */
/* "Software"), to deal in the Software without restriction, including   */
/* without limitation the rights to use, copy, modify, merge, publish,   */
/* distribute, sublicense, and/or sell copies of the Software, and to    */
/* permit persons to whom the Software is furnished to do so, subject to */
/* the following conditions:                                             */
/*                                                                       */
/* The above copyright notice and this permission notice shall be        */
/* included in all copies or substantial portions of the Software.       */
/*                                                                       */
/* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,       */
/* EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF    */
/* MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.*/
/* IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY  */
/* CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,  */
/* TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE     */
/* SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.                */
/*************************************************************************/

// From: godot/bin/tests/test_gdscript.cpp
static String _disassemble_addr(const Ref<GDScript>& p_script, const GDFunction& func, int p_addr, const Vector<String>& p_code) {

	int addr=p_addr&GDFunction::ADDR_MASK;

	switch(p_addr>>GDFunction::ADDR_BITS) {

		case GDFunction::ADDR_TYPE_SELF: {
			return "self";
		} break;
		case GDFunction::ADDR_TYPE_CLASS: {
			return "class";
		} break;
		case GDFunction::ADDR_TYPE_MEMBER: {

			return "member("+p_script->debug_get_member_by_index(addr)+")";
		} break;
		case GDFunction::ADDR_TYPE_CLASS_CONSTANT: {

			return "class_const("+func.get_global_name(addr)+")";
		} break;
		case GDFunction::ADDR_TYPE_LOCAL_CONSTANT: {

			Variant v=func.get_constant(addr);
			String txt;
			if (v.get_type()==Variant::STRING || v.get_type()==Variant::NODE_PATH)
				txt="\""+String(v)+"\"";
			else
				txt=v;
			return "const("+txt+")";
		} break;
		case GDFunction::ADDR_TYPE_STACK: {

			return "stack("+itos(addr)+")";
		} break;
		case GDFunction::ADDR_TYPE_STACK_VARIABLE: {

			return "var_stack("+itos(addr)+")";
		} break;
		case GDFunction::ADDR_TYPE_GLOBAL: {

			return "global("+func.get_global_name(addr)+")";
		} break;
		case GDFunction::ADDR_TYPE_NIL: {
			return "nil";
		} break;

	}

	return "<err>";
}

// Adapted from: godot/bin/tests/test_gdscript.cpp
static void _dissassemble_function(const Ref<GDScript>& p_class, const GDFunction& p_function, const Vector<String> p_code) {

	const int *code = p_function.get_code();
	int codelen=p_function.get_code_size();
	String defargs;
	if (p_function.get_default_argument_count()) {
		defargs="defarg at: ";
		for(int i=0;i<p_function.get_default_argument_count();i++) {

			if (i>0)
				defargs+=",";
			defargs+=itos(p_function.get_default_argument_addr(i));
		}
		defargs+=" ";
	}
	print_line("== function "+String(p_function.get_name())+"() :: stack size: "+itos(p_function.get_max_stack_size())+" "+defargs+"==");

#define DADDR(m_ip) (_disassemble_addr(p_class,p_function,code[ip+m_ip], p_code))

	for(int ip=0;ip<codelen;) {


		int incr=0;
		String txt=itos(ip)+" ";

		switch(code[ip]) {

		case GDFunction::OPCODE_OPERATOR: {

			int op = code[ip+1];
			txt+="op ";

			String opname = Variant::get_operator_name(Variant::Operator(op));

			txt+=DADDR(4);
			txt+=" = ";
			txt+=DADDR(2);
			txt+=" "+opname+" ";
			txt+=DADDR(3);
			incr+=5;

		} break;
		case GDFunction::OPCODE_SET: {

			txt+="set ";
			txt+=DADDR(1);
			txt+="[";
			txt+=DADDR(2);
			txt+="]=";
			txt+=DADDR(3);
			incr+=4;

		} break;
		case GDFunction::OPCODE_GET: {

			txt+=" get ";
			txt+=DADDR(3);
			txt+="=";
			txt+=DADDR(1);
			txt+="[";
			txt+=DADDR(2);
			txt+="]";
			incr+=4;

		} break;
		case GDFunction::OPCODE_SET_NAMED: {

			txt+=" set_named ";
			txt+=DADDR(1);
			txt+="[\"";
			txt+=p_function.get_global_name(code[ip+2]);
			txt+="\"]=";
			txt+=DADDR(3);
			incr+=4;


		} break;
		case GDFunction::OPCODE_GET_NAMED: {

			txt+=" get_named ";
			txt+=DADDR(3);
			txt+="=";
			txt+=DADDR(1);
			txt+="[\"";
			txt+=p_function.get_global_name(code[ip+2]);
			txt+="\"]";
			incr+=4;

		} break;
		case GDFunction::OPCODE_ASSIGN: {

			txt+=" assign ";
			txt+=DADDR(1);
			txt+="=";
			txt+=DADDR(2);
			incr+=3;


		} break;
		case GDFunction::OPCODE_ASSIGN_TRUE: {

			txt+=" assign ";
			txt+=DADDR(1);
			txt+="= true";
			incr+=2;

		} break;
		case GDFunction::OPCODE_ASSIGN_FALSE: {

			txt+=" assign ";
			txt+=DADDR(1);
			txt+="= false";
			incr+=2;

		} break;
		case GDFunction::OPCODE_CONSTRUCT: {

			Variant::Type t=Variant::Type(code[ip+1]);
			int argc=code[ip+2];

			txt+=" construct ";
			txt+=DADDR(3+argc);
			txt+=" = ";

			txt+=Variant::get_type_name(t)+"(";
			for(int i=0;i<argc;i++) {

				if (i>0)
					txt+=", ";
				txt+=DADDR(i+3);
			}
			txt+=")";

			incr=4+argc;

		} break;
		case GDFunction::OPCODE_CONSTRUCT_ARRAY: {

			int argc=code[ip+1];
			txt+=" make_array ";
			txt+=DADDR(2+argc);
			txt+=" = [ ";

			for(int i=0;i<argc;i++) {
				if (i>0)
					txt+=", ";
				txt+=DADDR(2+i);
			}

			txt+="]";

			incr+=3+argc;

		} break;
		case GDFunction::OPCODE_CONSTRUCT_DICTIONARY: {

			int argc=code[ip+1];
			txt+=" make_dict ";
			txt+=DADDR(2+argc*2);
			txt+=" = { ";

			for(int i=0;i<argc;i++) {
				if (i>0)
					txt+=", ";
				txt+=DADDR(2+i*2+0);
				txt+=":";
				txt+=DADDR(2+i*2+1);
			}

			txt+="}";

			incr+=3+argc*2;

		} break;

		case GDFunction::OPCODE_CALL:
		case GDFunction::OPCODE_CALL_RETURN: {

			bool ret=code[ip]==GDFunction::OPCODE_CALL_RETURN;

			if (ret)
				txt+=" call-ret ";
			else
				txt+=" call ";


			int argc=code[ip+1];
			if (ret) {
				txt+=DADDR(4+argc)+"=";
			}

			txt+=DADDR(2)+".";
			txt+=String(p_function.get_global_name(code[ip+3]));
			txt+="(";

			for(int i=0;i<argc;i++) {
				if (i>0)
					txt+=", ";
				txt+=DADDR(4+i);
			}
			txt+=")";


			incr=5+argc;

		} break;
		case GDFunction::OPCODE_CALL_BUILT_IN: {

			txt+=" call-built-in ";

			int argc=code[ip+2];
			txt+=DADDR(3+argc)+"=";

			txt+=GDFunctions::get_func_name(GDFunctions::Function(code[ip+1]));
			txt+="(";

			for(int i=0;i<argc;i++) {
				if (i>0)
					txt+=", ";
				txt+=DADDR(3+i);
			}
			txt+=")";


			incr=4+argc;

		} break;
		case GDFunction::OPCODE_CALL_SELF_BASE: {

			txt+=" call-self-base ";

			int argc=code[ip+2];
			txt+=DADDR(3+argc)+"=";

			txt+=p_function.get_global_name(code[ip+1]);
			txt+="(";

			for(int i=0;i<argc;i++) {
				if (i>0)
					txt+=", ";
				txt+=DADDR(3+i);
			}
			txt+=")";


			incr=4+argc;

		} break;
		case GDFunction::OPCODE_YIELD: {

			txt+=" yield ";
			incr=1;

		} break;
		case GDFunction::OPCODE_YIELD_SIGNAL: {

			txt+=" yield_signal ";
			txt+=DADDR(1);
			txt+=",";
			txt+=DADDR(2);
			incr=3;
		} break;
		case GDFunction::OPCODE_YIELD_RESUME: {

			txt+=" yield resume: ";
			txt+=DADDR(1);
			incr=2;
		} break;
		case GDFunction::OPCODE_JUMP: {

			txt+=" jump ";
			txt+=itos(code[ip+1]);

			incr=2;

		} break;
		case GDFunction::OPCODE_JUMP_IF: {


			txt+=" jump-if ";
			txt+=DADDR(1);
			txt+=" to ";
			txt+=itos(code[ip+2]);

			incr=3;
		} break;
		case GDFunction::OPCODE_JUMP_IF_NOT: {


			txt+=" jump-if-not ";
			txt+=DADDR(1);
			txt+=" to ";
			txt+=itos(code[ip+2]);

			incr=3;
		} break;
		case GDFunction::OPCODE_JUMP_TO_DEF_ARGUMENT: {


			txt+=" jump-to-default-argument ";
			incr=1;
		} break;
		case GDFunction::OPCODE_RETURN: {

			txt+=" return ";
			txt+=DADDR(1);

			incr=2;

		} break;
		case GDFunction::OPCODE_ITERATE_BEGIN: {

			txt+=" for-init "+DADDR(4)+" in "+DADDR(2)+" counter "+DADDR(1)+" end "+itos(code[ip+3]);
			incr+=5;

		} break;
		case GDFunction::OPCODE_ITERATE: {

			txt+=" for-loop "+DADDR(4)+" in "+DADDR(2)+" counter "+DADDR(1)+" end "+itos(code[ip+3]);
			incr+=5;

		} break;
		case GDFunction::OPCODE_LINE: {



			int line = code[ip+1]-1;
			if (line>=0 && line <p_code.size())
				txt="\n"+itos(line+1)+": "+p_code[line]+"\n";
			else
				txt="";
			incr+=2;
		} break;
		case GDFunction::OPCODE_END: {

			txt+=" end";
			incr+=1;
		} break;
		case GDFunction::OPCODE_ASSERT: {

			txt+=" assert ";
			txt+=DADDR(1);
			incr+=2;

		} break;

		}

		if (incr==0) {

			ERR_EXPLAIN("unhandled opcode: "+itos(code[ip]));
			ERR_BREAK(incr==0);
		}

		ip+=incr;
		if (txt!="")
			print_line(txt);
	}
}

// Adapted from: godot/bin/tests/test_gdscript.cpp
static void _disassemble_class(const Ref<GDScript>& p_class, const Vector<String>& p_code) {

	const Map<StringName,GDFunction>& mf = p_class->debug_get_member_functions();

	for(const Map<StringName,GDFunction>::Element *E=mf.front();E;E=E->next()) {

		const GDFunction &func=E->get();
		_dissassemble_function(p_class, func, p_code);
	}
}
